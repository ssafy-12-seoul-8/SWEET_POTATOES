import java.io.*;
import java.util.*;
	
/* 1 2 3 4
 * 2 4 6 8
 * 3 6 9 12
 * 4 8 12 16
 * 
 * 1 2 3 4 5 6 7 8 9
 * 1 2 2 3 3 4 4 4 6 6 8 8 9 12 12 16
 * 
 * n = 4, k = 9 => x -> x는 6이고 6보다 작거나 같은 수는 9개임.
 * 1 ~ 16 (min(10^9, n * n))까지 이분 탐색.
 * 
 * mid = 1 + 16 / 2 = 8
 * 8보다 작거나 같은 수? 배수가 8이랑 같거나 작은거 => 1*1, 1*2, 1*3, 1*4, 2*1, 2*2, 2*3, 2*4, 3*1, 3*2, 4*1, 4*2 => 1, 2, 2, 3, 3, 4, 4, 4, 6, 6, 8, 8 -> 12개 => 많으니까 줄이자.
 * mid = 1 + 7 / 2 = 4
 * 배수가 4랑 같거나 작은거 => 1*1, 1*2, 1*3, 1*4, 2*1, 2*2, 3*1, 4*1 -> 1, 2, 2, 3, 3, 4, 4, 4 => 8개 -> 적으니까 늘리자.
 * mid = 5 + 7 / 2 = 6
 * 1*1, 1*2, 1*3, 1*4, 2*1, 2*2, 2*3, 3*1, 3*2, 4*1 -> 1, 2, 2, 3, 3, 4, 4, 4, 6, 6 => 10개 -> 많으니까 줄이자.
 * mid = 5 + 5 / 2 = 5
 * 1*1, 1*2, 1*3, 1*4, 2*1, 2*2, 3*1, 4*1 -> 1, 2, 2, 3, 3, 4, 4, 4 => 8개 -> 적으니까 늘리자.
 * left = 6 > right = 5 => x = left 일 때 포함하는 수가 8개보다 많고 10개보다 적으니 9개가 해당됨. 6일 때 답이다! (left)
 * 
 * 개수를 셀 때 순회를 이중으로 해야하나?
 * mid = 8일 때
 * i = 1 -> 8 / 1 = 8 -> min(8, n - row의 최대 col) = 4 => 1*1부터 1*4까지 포함 -> 4개
 * i = 2 -> 8 / 2 = 4 -> min(4, n) = 4 => 2*1부터 2*4까지 포함 -> 4개
 * i = 3 -> 8 / 3 = 2 -> min(2, n) = 2 => 3*1부터 3*2까지 포함 -> 2개
 * i = 4 -> 8 / 4 = 2 -> min(2, n) = 2 => 4*1부터 4*2까지 포함 -> 2개
 * 12개를 찾을 수 있음.
 * 
 * mid = 4일 때
 * i = 1 -> 4 / 1 = 4 -> min(4, n) = 4 => 1*1부터 1*4까지 포함 -> 4개
 * i = 2 -> 4 / 2 = 2 -> min(2, n) = 2 => 2*1부터 2*2까지 포함 -> 2개
 * i = 3 -> 4 / 3 = 1 -> min(1, n) = 1 => 3*1부터 3*1까지 포함 -> 1개
 * i = 4 -> 4 / 4 = 1 -> min(1, n) = 1 => 4*1부터 4*1까지 포함 -> 1개
 * 8개
 * 
 * mid = 6일 때
 * i = 1 -> 6 / 1 = 6 -> min(6, n) = 4 => 1*1부터 1*4까지 포함 -> 4개
 * i = 2 -> 6 / 2 = 3 -> min(3, n) = 3 => 2*1부터 2*3까지 포함 -> 3개
 * i = 3 -> 6 / 3 = 2 -> min(2, n) = 2 => 3*1부터 3*2까지 포함 -> 2개
 * i = 4 -> 6 / 4 = 1 -> min(1, n) = 1 => 4*1부터 4*1까지 포함 -> 1개
 * 10개
 * 
 * mid = 5일 때
 * i = 1 -> 5 / 1 = 5 -> min(5, n) = 4 => 1*1부터 1*4까지 포함 -> 4개
 * i = 2 -> 5 / 2 = 2 -> min(2, n) = 2 => 2*1부터 2*2까지 포함 -> 2개
 * i = 3 -> 5 / 3 = 1 -> min(1, n) = 1 => 3*1부터 3*1까지 포함 -> 1개
 * i = 4 -> 5 / 4 = 1 -> min(1, n) = 1 => 4*1부터 4*1까지 포함 -> 1개
 * 8개
 * 
 * 만약 i가 10^5가 됐다면? 10^5 * 10^5 = 100억 -> long 필요
 */

public class Main {
	
	static int n, k;
	
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		n = Integer.parseInt(br.readLine());
		k = Integer.parseInt(br.readLine());
		int left = 1;
		int right = k;
		
		while (left <= right) {
			int mid = (left + right) / 2;
			
			if (isPossible(mid)) {
				right = mid - 1;
			} else {
				left = mid + 1;
			}
		}
		
		System.out.println(left);
	}
	
	static boolean isPossible(int max) {
		long count = 0;
		
		for (int i = 1; i <= n; i++) {
			count += Math.min(max / i, n);
			
			if (count >= k) {
				return true;
			}
		}
		
		return false;
	}
	
}
